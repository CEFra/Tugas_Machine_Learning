# -*- coding: utf-8 -*-
"""Kelompok Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12kpE-ejZ_-om3Ufq_STlB7DHLA4MiqW6
"""

from google.colab import files
df=files.upload()
test_df=files.upload()

import numpy as np
import pandas as pd

df = pd.read_csv("train.csv")
df

df['Age'].isnull().sum()

def passenger_type (row):
  if row['Age'] < 2:
    return 'Infant'
  elif (row['Age'] >= 2 and row ['Age'] < 12):
    return 'Child'
  elif (row['Age'] >= 12 and row ['Age'] <18):
    return 'Youth'
  elif (row['Age'] >= 18 and row ['Age'] <65):
    return 'Adult'
  elif row['Age'] >=65:
    return 'Senior'

df['PassengerType'] = df.apply(lambda row:passenger_type(row), axis=1)

df['PassengerType'].value_counts()

sex_map={"male":1, "female":0}
df['Sex']=df['Sex'].map(sex_map)

df.head()

passenger_type_map={"Unknown":0,
                    "Infant":1,
                    "Child":2,
                    "Youth":3,
                    "Adult":4,
                    "Senior":5}

df['PassengerType']=df['PassengerType'].map(passenger_type_map)

df.head()

import seaborn as sns

def titanic_corr(df):
  correlation = df.corr()
  sns.heatmap(correlation, annot=True, cbar=True, cmap="RdYlGn")

titanic_corr(df)

df.corr()

df.isnull().sum()

df['Age'].fillna(0, inplace=True)
df['Cabin'].fillna("Di tempat lain", inplace=True)
df['Embarked'].fillna("Tidak diketahui", inplace=True)
df['PassengerType'].fillna(0, inplace=True)

df['Cabin'].value_counts()

df.info()

"""Decission Tree"""

df.drop(['PassengerId','Name','Ticket','Cabin','Pclass','Sex','SibSp','Embarked'], inplace=True, axis=1)

from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn.model_selection import train_test_split

xdf = df.drop('Survived', axis=1)
ydf = df.Survived

xtrain, xtest, ytrain, ytest=train_test_split(xdf,ydf,test_size=0.3, random_state=1)

clf = DecisionTreeClassifier()
clf = clf.fit(xtrain,ytrain)

ypred=clf.predict(xtest)

print('Akurasi DTRee = ', metrics.accuracy_score(ytest,ypred)*100)

print(metrics.classification_report(ytest,ypred))

"""KNN"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(xtrain)
xtrain=scaler.transform(xtrain)
xtest=scaler.transform(xtest)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(xtrain,ytrain)

ypred=classifier.predict(xtest)

print('Akurasi KNN = ', metrics.accuracy_score(ytest,ypred)*100)

print(metrics.classification_report(ytest,ypred))